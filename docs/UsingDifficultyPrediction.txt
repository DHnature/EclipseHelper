Plugin logs are in:D:\dewan_backup\Java\eclipse\runtime-EclipseHelper2\.metadata\.plugins\edu.cmu.scs.fluorite\Logs
workspace/euntime-configuration/.metadata/plugin-name/Logs


Here is a quick doc on how to use the dfiiculty prediction modules of EclipseHelper without the rest of the code.

To understand this properly, you should look at the Carter and Dewan group paper on the architecture of prediction softwrae.

As the paper indicates, the modules all communicate through a central module called the mediator.

The mediator interface is implemented by the class DifficultyRobot, which is the main class with which you interact to use the modules.

If you run the ANAnaylizer main, and put breakpoints on each method in this class, you see the algorithm in action.

AnAnalyzer  has a UI that allows replay of logs of previous participants. 
When the window comes up, execute loadlogs, which whould populate the pariticpants combobox menu. 
Select one of the pariticpants (say 16) and then execute replay.
 
We do not want the predictions to refer to the plugin windows, so you need to execute:
		DifficultyPredictionSettings.setReplayMode(true);
to indicate that the plugin is not involved.

You also need to set the prediction parameters. This is done by the code:
	FactorySingletonInitializer.configure();
Because you are in replay mode, this calls:
	ReplayModeInitializer.configure();

This in turn calls:
		RatioFeaturesFactorySelector.setFactory(new ARatioFeaturesFactory());
		RatioCalculatorSelector.setFactory(new ATestRatioCalculatorFactory());
		PredictionParametersSetterSelector.setSingleton(new ATestPredictionParametersSetter());
You can play around with the parameters setter and maybe even rationc alculator an dfeatyres factory by calling this code directly rather than through the configure methods.

If you want the predictions to be displayed interactively, run:
	APredictionController.createUI();
Look at the menu, APredictionController, it will give you an option to display the multi-level aggregator and line graph. These should be updated as the algorithm	proceeds.

This is all setup. The main task is to feed commands to the prediction module and get predictions.

To feed commands, you need the following object:
	DifficultyPredictionPluginEventProcessor.getInstance();
Once you have this object, you need some more setup perhaps 
(I am not sure if you do not do this, the defaullt is ADIsjointChunksAnalyzer,
 Kevin seems to have implemented this one, Jason the default one. 
 You may try your code with and without this code):
        Mediator mediator = difficultyEventProcessor.getDifficultyPredictionRunnable().getMediator();
		EventAggregator eventAggregator = mediator.getEventAggregator();
		eventAggregator.setEventAggregationStrategy(new DiscreteChunksAnalyzer("" + PredictionParametersSetterSelector.getSingleton().getSegmentLength()));
	
To get notifications of difficulty predictions, some more setup:
			DifficultyRobot.getInstance().addStatusListener(this);
StatusListener has the method:
	void newAggregatedStatus(String aStatus);
which is called when a new status is predicted.

Finally to feed new commands to the prediction code,you need to execute:

DifficultyPredictionPluginEventProcessor.getInstance().newCommmand().

The argument to it is an ICommand.

You need to construct appropriate instances of this interface. See the various classes that implement this interface)

I have added a new class called AGenericRatioCalculator, which takes a tabular description of the command to command-category mapping.
The command names are in an enum class called: 
CommandName (in difficultyprediction.metrics). To add more commands, edit this.
The category names are in an enum class called:
CommandCategory
Each mapping from CommandName to CommandCategory has a name. The names of the mappings are in class:
CommandClassificationSchemeName
There are five names right now: A0-A4.
Each of these names is associated with an actual mapping.
There are five mappings right now:
AnA0CommandCategories..AnA4CommandCategories
The first four are used. The last one is a dummy policy that can be changed. 
Thus, AnA4CommandCategories can be edited to create a new mapping.
The current mapping is decided by calling APredictionParameters.getInstance().setCommandClassificationScheme();
This call can be made in one of the two configure methods.

To change one or more classes best to create the class in your project, which should supersede the one in the EclipseHelper project.
